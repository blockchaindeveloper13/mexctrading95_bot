import os
import json
import pandas as pd
import pandas_ta as ta
import logging
import asyncio
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
from aiohttp import web
from dotenv import load_dotenv
from datetime import datetime
import re

# Eksik sÄ±nÄ±flarÄ± ve fonksiyonlarÄ± iÃ§e aktar
from mexc_client import MEXCClient  # MEXCClient sÄ±nÄ±fÄ±nÄ± iÃ§e aktar
from deepseek_client import DeepSeekClient  # DeepSeekClient sÄ±nÄ±fÄ±nÄ± iÃ§e aktar
from storage import Storage  # Storage sÄ±nÄ±fÄ±nÄ± iÃ§e aktar
from indicators import calculate_indicators  # calculate_indicators fonksiyonunu iÃ§e aktar

# Loglama ayarlarÄ±
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

class TelegramBot:
    def __init__(self):
        """Telegram botunu baÅŸlatÄ±r ve gerekli ayarlarÄ± yapar."""
        logger.debug("TelegramBot baÅŸlatÄ±lÄ±yor")
        self.group_id = int(os.getenv('TELEGRAM_GROUP_ID', '-1002869335730'))
        self.client = OpenAI(api_key=os.getenv('DEEPSEEK_API_KEY'), base_url="https://api.deepseek.com")
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logger.error("TELEGRAM_BOT_TOKEN ortam deÄŸiÅŸkeni eksik")
            raise ValueError("TELEGRAM_BOT_TOKEN ortam deÄŸiÅŸkeni eksik")
        
        try:
            # Telegram Application oluÅŸtur
            self.app = Application.builder().token(bot_token).build()
            logger.debug("Application baÅŸarÄ±yla baÅŸlatÄ±ldÄ±")
            
            # Komut ve callback handler'larÄ± ekle
            self.app.add_handler(CommandHandler("start", self.start))
            self.app.add_handler(CallbackQueryHandler(self.button))
            self.app.add_handler(CommandHandler("show_analysis", self.show_analysis))
            self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.chat))
            self.web_app = None
            
            # Job queue kontrolÃ¼
            if self.app.job_queue is not None:
                try:
                    self.app.job_queue.start()
                    logger.debug("Job queue baÅŸarÄ±yla baÅŸlatÄ±ldÄ±")
                except Exception as e:
                    logger.warning(f"Job queue baÅŸlatÄ±lamadÄ±: {e}. Job queue olmadan devam ediliyor.")
            else:
                logger.warning("Job queue mevcut deÄŸil. Job queue olmadan devam ediliyor.")
        except Exception as e:
            logger.error(f"Application baÅŸlatÄ±lÄ±rken hata: {e}")
            raise

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """ /start komutu iÃ§in menÃ¼ oluÅŸturur. """
        logger.debug(f"Start komutu alÄ±ndÄ±, chat_id={update.effective_chat.id}")
        keyboard = [
            [InlineKeyboardButton("Top 100 Spot Analizi", callback_data='top_100_spot')],
            [InlineKeyboardButton("Top 300 Spot Analizi", callback_data='top_300_spot')],
            [InlineKeyboardButton("Top 100 Vadeli Analizi", callback_data='top_100_futures')],
            [InlineKeyboardButton("Top 300 Vadeli Analizi", callback_data='top_300_futures')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("Analiz iÃ§in butonlarÄ± kullanabilirsiniz:", reply_markup=reply_markup)

    async def button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Buton tÄ±klamalarÄ±nÄ± iÅŸler ve analiz baÅŸlatÄ±r."""
        query = update.callback_query
        await query.answer()
        logger.debug(f"Buton tÄ±klandÄ±: {query.data}")
        try:
            parts = query.data.split('_')
            limit = int(parts[1])
            trade_type = parts[2]
            await query.message.reply_text(f"{trade_type.upper()} analizi yapÄ±lÄ±yor (Top {limit})...")
            data = {'chat_id': self.group_id, 'limit': limit, 'trade_type': trade_type}
            
            # Job queue kontrolÃ¼
            if self.app.job_queue is None:
                logger.warning("Job queue mevcut deÄŸil, analyze_and_send direkt Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor")
                await self.analyze_and_send(context, data)
            else:
                self.app.job_queue.run_once(
                    self.analyze_and_send,
                    0,
                    data=data,
                    chat_id=self.group_id
                )
        except Exception as e:
            logger.error(f"Buton iÅŸleyicisinde hata: {e}")
            await query.message.reply_text(f"Hata: {str(e)}")

    async def analyze_and_send(self, context: ContextTypes.DEFAULT_TYPE, data=None):
        """Coin analizini yapar ve sonuÃ§larÄ± gÃ¶nderir."""
        if data is None:
            data = context.job.data
        chat_id = data['chat_id']
        limit = data['limit']
        trade_type = data['trade_type']
        logger.debug(f"Analiz yapÄ±lÄ±yor: chat_id={chat_id}, limit={limit}, trade_type={trade_type}")
        try:
            results = await self.analyze_coins(limit, trade_type, chat_id)
            if not results.get(f'top_{limit}_{trade_type}'):
                await context.bot.send_message(chat_id=chat_id, text=f"Top {limit} {trade_type} analizi iÃ§in anlamlÄ± sonuÃ§ bulunamadÄ±.")
            logger.info(f"Top {limit} {trade_type} iÃ§in analiz tamamlandÄ±")
        except Exception as e:
            logger.error(f"analyze_and_send sÄ±rasÄ±nda hata: {e}")
            await context.bot.send_message(chat_id=chat_id, text=f"{trade_type} analizi sÄ±rasÄ±nda hata: {str(e)}")

    async def chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """KullanÄ±cÄ± mesajlarÄ±na yanÄ±t verir."""
        logger.debug(f"Mesaj alÄ±ndÄ±: {update.message.text}")
        try:
            response = await asyncio.wait_for(
                asyncio.to_thread(
                    self.client.chat.completions.create,
                    model="deepseek-chat",
                    messages=[{"role": "user", "content": update.message.text}]
                ),
                timeout=20
            )
            await update.message.reply_text(response.choices[0].message.content)
        except Exception as e:
            logger.error(f"Chat sÄ±rasÄ±nda hata: {e}")
            await update.message.reply_text(f"Hata: {str(e)}")

    async def show_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """KaydedilmiÅŸ analiz sonuÃ§larÄ±nÄ± gÃ¶sterir."""
        logger.debug("show_analysis komutu alÄ±ndÄ±")
        try:
            storage = Storage()
            data = storage.load_analysis()
            messages = []
            for trade_type in ['spot', 'futures']:
                for limit in [100, 300]:
                    key = f'top_{limit}_{trade_type}'
                    if key in data and data[key]:
                        for coin_data in data[key]:
                            message = self.format_results(coin_data, trade_type, coin_data['coin'])
                            messages.append(message)
            if messages:
                await update.message.reply_text("\n\n".join(messages))
            else:
                await update.message.reply_text("Analiz sonucu bulunamadÄ±.")
        except Exception as e:
            logger.error(f"Analiz yÃ¼klenirken hata: {e}")
            await update.message.reply_text(f"Hata: {str(e)}")

    def format_results(self, coin_data, trade_type, symbol):
        """Analiz sonuÃ§larÄ±nÄ± biÃ§imlendirir."""
        logger.debug(f"{symbol} ({trade_type}) iÃ§in sonuÃ§lar biÃ§imlendiriliyor")
        indicators = coin_data.get('indicators', {})
        analysis = coin_data.get('deepseek_analysis', {}).get('short_term', {})
        # Hacim deÄŸiÅŸimlerini gÃ¼venli bir ÅŸekilde biÃ§imlendir
        volume_changes = {}
        for tf in ['1m', '5m', '15m', '30m', '60m']:
            value = indicators.get(f'volume_change_{tf}', None)
            volume_changes[tf] = f"{value:.2f}" if isinstance(value, (int, float)) else "N/A"
        bid_ask_ratio = indicators.get('bid_ask_ratio', None)
        bid_ask_ratio_str = f"{bid_ask_ratio:.2f}" if isinstance(bid_ask_ratio, (int, float)) else "N/A"
        try:
            message = (
                f"ğŸ“Š {symbol} {trade_type.upper()} Analizi ({datetime.now().strftime('%Y-%m-%d %H:%M')})\n"
                f"- KÄ±sa Vadeli: GiriÅŸ: ${analysis.get('entry_price', 0):.2f} | "
                f"Ã‡Ä±kÄ±ÅŸ: ${analysis.get('exit_price', 0):.2f} | "
                f"Stop Loss: ${analysis.get('stop_loss', 0):.2f} | "
                f"KaldÄ±raÃ§: {analysis.get('leverage', 'N/A')}\n"
                f"- Pump OlasÄ±lÄ±ÄŸÄ±: {analysis.get('pump_probability', 0)}% | "
                f"Dump OlasÄ±lÄ±ÄŸÄ±: {analysis.get('dump_probability', 0)}%\n"
                f"- Temel Analiz: {analysis.get('fundamental_analysis', 'Veri yok')}\n"
                f"- Hacim DeÄŸiÅŸimleri: 1m: {volume_changes['1m']}% | "
                f"5m: {volume_changes['5m']}% | "
                f"15m: {volume_changes['15m']}% | "
                f"30m: {volume_changes['30m']}% | "
                f"60m: {volume_changes['60m']}% \n"
                f"- Bid/Ask OranÄ±: {bid_ask_ratio_str}\n"
            )
            return message
        except Exception as e:
            logger.error(f"{symbol} iÃ§in sonuÃ§lar biÃ§imlendirilirken hata: {e}")
            return f"{symbol} analizi biÃ§imlendirilirken hata: {str(e)}"

    async def process_coin(self, symbol, mexc, deepseek, trade_type, chat_id):
        """Tek bir coin iÃ§in analiz yapar."""
        logger.debug(f"{symbol} ({trade_type}) iÅŸleniyor")
        try:
            data = await mexc.fetch_and_save_market_data(symbol)
            if not data:
                logger.warning(f"{symbol} ({trade_type}) iÃ§in geÃ§erli piyasa verisi yok")
                await self.app.bot.send_message(chat_id=chat_id, text=f"{symbol} iÃ§in geÃ§erli piyasa verisi yok")
                return None

            data['indicators'] = calculate_indicators(
                data['klines'].get('1m', []), data['klines'].get('5m', []), data['klines'].get('15m', []),
                data['klines'].get('30m', []), data['klines'].get('60m', []), data.get('order_book')
            )
            if not data['indicators']:
                logger.warning(f"{symbol} ({trade_type}) iÃ§in gÃ¶sterge hesaplanamadÄ±")
                await self.app.bot.send_message(chat_id=chat_id, text=f"{symbol} iÃ§in gÃ¶sterge hesaplanamadÄ±")
                return None

            data['deepseek_analysis'] = deepseek.analyze_coin(data, trade_type)
            logger.info(f"{symbol} ({trade_type}) iÅŸlendi: fiyat={data.get('price')}, "
                       f"klines_60m={len(data['klines'].get('60m', []))}")

            message = self.format_results(data, trade_type, symbol)
            await self.app.bot.send_message(chat_id=chat_id, text=message)
            logger.info(f"{symbol} ({trade_type}) iÃ§in analiz gÃ¶nderildi")

            storage = Storage()
            storage.save_analysis({f'{symbol}_{trade_type}': [data]})

            return data
        except Exception as e:
            logger.error(f"{symbol} ({trade_type}) iÅŸlenirken hata: {e}")
            await self.app.bot.send_message(chat_id=chat_id, text=f"{symbol} iÅŸlenirken hata: {str(e)}")
            return None

    async def analyze_coins(self, limit, trade_type, chat_id):
        """Top coin'ler iÃ§in analiz yapar."""
        logger.debug(f"analyze_coins baÅŸlatÄ±lÄ±yor: limit={limit}, trade_type={trade_type}")
        mexc = MEXCClient()
        deepseek = DeepSeekClient()

        coins = await mexc.get_top_coins(limit)
        logger.info(f"{len(coins)} coin analiz ediliyor: {coins[:5]}...")

        results = {'date': datetime.now().strftime('%Y-%m-%d'), f'top_{limit}_{trade_type}': []}
        for symbol in coins:
            coin_data = await self.process_coin(symbol, mexc, deepseek, trade_type, chat_id)
            if coin_data:
                results[f'top_{limit}_{trade_type}'].append(coin_data)
            await asyncio.sleep(3.0)  # Rate limit iÃ§in bekleme
        logger.info(f"Top {limit} {trade_type} iÃ§in {len(results[f'top_{limit}_{trade_type}'])} geÃ§erli coin iÅŸlendi")
        await mexc.close()
        return results

    async def webhook_handler(self, request):
        """Webhook isteklerini iÅŸler."""
        logger.debug("Webhook isteÄŸi alÄ±ndÄ±")
        try:
            raw_data = await request.json()
            update = Update.de_json(raw_data, self.app.bot)
            if not update:
                logger.warning("GeÃ§ersiz webhook gÃ¼ncellemesi")
                return web.Response(text="HATA: GeÃ§ersiz gÃ¼ncelleme", status=400)
            await self.app.process_update(update)
            return web.Response(text="OK")
        except Exception as e:
            logger.error(f"Webhook hatasÄ±: {e}")
            return web.Response(text=f"HATA: {str(e)}", status=500)

    async def run(self):
        """Webhook sunucusunu baÅŸlatÄ±r."""
        logger.debug("Webhook sunucusu baÅŸlatÄ±lÄ±yor")
        await self.app.initialize()
        await self.app.start()
        self.web_app = web.Application()
        self.web_app.router.add_post('/webhook', self.webhook_handler)
        webhook_url = f"https://{os.getenv('HEROKU_APP_NAME')}.herokuapp.com/webhook"
        try:
            await self.app.bot.set_webhook(url=webhook_url)
            logger.debug(f"Webhook {webhook_url} adresine ayarlandÄ±")
        except Exception as e:
            logger.error(f"Webhook ayarlanÄ±rken hata: {e}")
            raise
        runner = web.AppRunner(self.web_app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', int(os.getenv('PORT', 8443)))
        await site.start()
        logger.info(f"Webhook sunucusu {os.getenv('PORT', 8443)} portunda Ã§alÄ±ÅŸÄ±yor")
        await asyncio.Event().wait()

def main():
    """Ana fonksiyon, botu baÅŸlatÄ±r."""
    logger.debug("Main baÅŸlatÄ±lÄ±yor")
    bot = TelegramBot()
    asyncio.run(bot.run())

if __name__ == "__main__":
    logger.debug("Script baÅŸlatÄ±ldÄ±")
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "analyze_coins":
        limit = int(sys.argv[2]) if len(sys.argv) > 2 else 100
        trade_type = sys.argv[3] if len(sys.argv) > 3 else 'spot'
        bot = TelegramBot()
        asyncio.run(bot.analyze_coins(limit, trade_type, bot.group_id))
    else:
        main()
